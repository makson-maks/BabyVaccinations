
#Область ПрограммныйИнтерфейс

Функция ПолучитьДатуВакцинацииПоДатеРождения(Знач ДатаРождения, Знач ВозрастВакцинации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	МесяцевВакцинации = Цел(ВозрастВакцинации);
	ДатаВакцинации = ДобавитьКДате(ДатаРождения, МесяцевВакцинации, "МЕСЯЦ");
	
	НедельВакцинации = (ВозрастВакцинации - МесяцевВакцинации) * 10;
	ДатаВакцинации = ДобавитьКДате(ДатаВакцинации, НедельВакцинации, "НЕДЕЛЯ");
	
	Возврат ДатаВакцинации	
	
КонецФункции

Функция ПолучитьВозрастВакцинацииПоДатеРождения(Знач ДатаРождения, Знач ДатаВакцинации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		Возврат 0;
	КонецЕсли;
	
	ВозрастВакцинации = РазностьДат(ДатаРождения, ДатаВакцинации, "МЕСЯЦ");
	
	ДатаВакцинацииПромежуточная = ДобавитьКДате(ДатаРождения, ВозрастВакцинации, "МЕСЯЦ"); 
	
	Пока ДатаВакцинацииПромежуточная < ДатаВакцинации Цикл
		ВозрастВакцинации = ВозрастВакцинации + 0.1; // увеличили возраст вакцинации на 1 неделю
		ДатаВакцинацииПромежуточная = ДобавитьКДате(ДатаВакцинацииПромежуточная, 1, "НЕДЕЛЯ");
	КонецЦикла;
	
	Возврат ВозрастВакцинации;
	
КонецФункции

Функция ПолучитьДоступныеВакциныПоИнфекции(Инфекция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнфекцииВакцины.Вакцина КАК Вакцина
		|ИЗ
		|	Справочник.Инфекции.Вакцины КАК ИнфекцииВакцины
		|ГДЕ
		|	ИнфекцииВакцины.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Инфекция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Вакцина");
	
КонецФункции

Функция ПолучитьДатуРожденияРебенка(Ребенок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Дети.ДатаРождения КАК ДатаРождения
		|ИЗ
		|	Справочник.Дети КАК Дети
		|ГДЕ
		|	Дети.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ребенок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаРождения) Тогда
		Возврат ВыборкаДетальныеЗаписи.ДатаРождения;
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
	
КонецФункции

Функция ДобавитьКДате(ДатаНачала, КоличествоПериодов, ТипПериода) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ТипПериода, КоличествоПериодов) КАК НоваяДата";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТипПериода", ТипПериода);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КоличествоПериодов", КоличествоПериодов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НоваяДата;
	
КонецФункции

Функция РазностьДат(ДатаНачала, ДатаОкончания, ТипПериода) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазностьДат(&ДатаНачала, &ДатаОкончания, ТипПериода) КАК РазностьДат";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТипПериода", ТипПериода);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.РазностьДат;
	
КонецФункции

Функция СтруктураРегистраСведений(ИмяРегистра) Экспорт
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЗаписьКакСтруктура = Новый Структура;
	
	Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
		ЗаписьКакСтруктура.Вставить(Поле.Имя, МенеджерЗаписи[Поле.Имя]);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		ЗаписьКакСтруктура.Вставить(Поле.Имя, МенеджерЗаписи[Поле.Имя]);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
		ЗаписьКакСтруктура.Вставить(Поле.Имя, МенеджерЗаписи[Поле.Имя]);
	КонецЦикла;
	
	Возврат ЗаписьКакСтруктура;
	
КонецФункции

Функция ПолучитьКлючЗаписиРегистраСведений(ИмяРегистра, СтруктураДанных) Экспорт
	
	КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(СтруктураДанных);
	
	Возврат КлючЗаписи;
	
КонецФункции

Процедура ОбработатьСтруктуруИзУведомления(СтруктураДанных) Экспорт
	
	Для каждого КлючЗначение Из СтруктураДанных Цикл
		Если КлючЗначение.Ключ = "Ребенок" Тогда
			СтруктураДанных[КлючЗначение.Ключ] = Справочники.Дети.ПолучитьСсылку(Новый УникальныйИдентификатор(КлючЗначение.Значение));
		ИначеЕсли КлючЗначение.Ключ = "Инфекция" Тогда
			СтруктураДанных[КлючЗначение.Ключ] = Справочники.Инфекции.ПолучитьСсылку(Новый УникальныйИдентификатор(КлючЗначение.Значение));
		ИначеЕсли КлючЗначение.Ключ = "Вакцина" Тогда
			СтруктураДанных[КлючЗначение.Ключ] = Справочники.Вакцины.ПолучитьСсылку(Новый УникальныйИдентификатор(КлючЗначение.Значение));
		ИначеЕсли КлючЗначение.Ключ = "ДатаВакцинации" Тогда
			СтруктураДанных[КлючЗначение.Ключ] = ПрочитатьДатуJSON(КлючЗначение.Значение, ФорматДатыJSON.ISO);;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти