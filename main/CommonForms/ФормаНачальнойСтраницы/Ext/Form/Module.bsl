
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПланировщикКалендарьПрививок.Измерения.Очистить();
	
	ПериодичностьПланировщика = Перечисления.ПериодыОтображенияКалендаря.День;
	ДатаНастройкиПериодичностиОтображения = ТекущаяДата();
	ЗаполнитьДанныеОПрививках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьИзменениеПериодичностиОтображенияПланировщикаКалендаряПрививок();
	УстановитьПредставлениеТекущейПериодичности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуНачальнойСтраницы" Тогда
		Элементы.СписокБлижайшихСобытий.Обновить();
		ЗаполнитьДанныеОПрививках();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКомандФормы

&НаКлиенте
Процедура СдвинутьПериодНазад(Команда)
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День") Тогда
		
		ДатаНастройкиПериодичностиОтображения = НачалоДня(ДатаНастройкиПериодичностиОтображения) - 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Неделя") Тогда
		
		ДатаНастройкиПериодичностиОтображения = НачалоДня(НачалоНедели(ДатаНастройкиПериодичностиОтображения)) - 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		
		ДатаНастройкиПериодичностиОтображения = НачалоДня(НачалоМесяца(ДатаНастройкиПериодичностиОтображения)) - 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Год") Тогда
		
		ДатаНастройкиПериодичностиОтображения = НачалоДня(НачалоГода(ДатаНастройкиПериодичностиОтображения)) - 1;
		
	КонецЕсли;
	
	УстановитьПериодОтображения();
	УстановитьПредставлениеТекущейПериодичности();
	ЗаполнитьДанныеОПрививках();
	ОбработатьИнтервалФона();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьПериодВперед(Команда)
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День") Тогда
		
		ДатаНастройкиПериодичностиОтображения = КонецДня(ДатаНастройкиПериодичностиОтображения) + 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Неделя") Тогда
		
		ДатаНастройкиПериодичностиОтображения = КонецДня(КонецНедели(ДатаНастройкиПериодичностиОтображения)) + 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		
		ДатаНастройкиПериодичностиОтображения = КонецДня(КонецМесяца(ДатаНастройкиПериодичностиОтображения)) + 1;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Год") Тогда
		
		ДатаНастройкиПериодичностиОтображения = КонецДня(КонецГода(ДатаНастройкиПериодичностиОтображения)) + 1;	
		
	КонецЕсли;
	
	УстановитьПериодОтображения();	
	УстановитьПредставлениеТекущейПериодичности();
	ЗаполнитьДанныеОПрививках();
	ОбработатьИнтервалФона();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРебенка(Команда)
	
	ОткрытьФорму("Справочник.Дети.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроек");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьПрививку(Команда)
	
	ОткрытьФорму("РегистрСведений.ПрививкиВОчереди.ФормаЗаписи");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодичностьПланировщикаПриИзменении(Элемент)
	
	ОбработатьИзменениеПериодичностиОтображенияПланировщикаКалендаряПрививок();
	УстановитьПредставлениеТекущейПериодичности();
	ЗаполнитьДанныеОПрививках();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти_СписокБлижайшихСобытий

&НаКлиенте
Процедура СписокБлижайшихСобытийПослеУдаления(Элемент)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ЗаполнитьДанныеОПрививках();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПланировщика

&НаКлиенте
Процедура ПланировщикКалендарьПрививокПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДатаВакцинации", Начало);
	ЗначенияЗаполнения.Вставить("ВремяЗаписи", Начало);
	
	Если Начало <> НачалоДня(Начало) Тогда
		ЗначенияЗаполнения.Вставить("ЕстьЗаписьКВрачу", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	ОткрытьФорму("РегистрСведений.ПрививкиВОчереди.Форма.ФормаЗаписи", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикКалендарьПрививокПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		
		СтруктураДанных = Элемент.ВыделенныеЭлементы[0].Значение;
		КлючЗаписи = ПолучитьКлючЗаписиРегистраПрививкиВОчереди(СтруктураДанных);
		УдалитьЗаписьРегистраПрививкиВОчереди(КлючЗаписи);
		ЗаполнитьДанныеОПрививках();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикКалендарьПрививокПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСуществующейЗаписиРегистраПрививкиВОчереди(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикКалендарьПрививокПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСуществующейЗаписиРегистраПрививкиВОчереди(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиенте
Процедура ОбработатьИзменениеПериодичностиОтображенияПланировщикаКалендаряПрививок()
	     
	УстановитьПериодОтображения();
	
	ИзменитьСвойстваПланировщика();
	
	ОбработатьШкалуВремени();
	
	ОбработатьИнтервалФона();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодОтображения()
	
	ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Очистить();
	
	ДатаНачалаПериодичности = РаботаСКалендаремКлиентСервер.ПолучитьДатуНачалаПериодичностиПланировщика(
		ПериодичностьПланировщика, 
		ДатаНастройкиПериодичностиОтображения);
		
	ДатаОкончанияПериодичности = РаботаСКалендаремКлиентСервер.ПолучитьДатуОкончанияПериодичностиПланировщика(
		ПериодичностьПланировщика, 
		ДатаНастройкиПериодичностиОтображения);
		
	ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(ДатаНачалаПериодичности, ДатаОкончанияПериодичности);
	
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190101000000"), Дата("20190131235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190201000000"), Дата("20190228235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190301000000"), Дата("20190331235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190401000000"), Дата("20190430235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190501000000"), Дата("20190531235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190601000000"), Дата("20190630235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190701000000"), Дата("20190731235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190801000000"), Дата("20190831235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20190901000000"), Дата("20190930235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20191001000000"), Дата("20191031235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20191101000000"), Дата("20191130235959"));
	//ПланировщикКалендарьПрививок.ТекущиеПериодыОтображения.Добавить(Дата("20191201000000"), Дата("20191231235959"));

	ПланировщикКалендарьПрививок.НачалоПериодаОтображения = ДатаНачалаПериодичности;
	ПланировщикКалендарьПрививок.КонецПериодаОтображения = ДатаОкончанияПериодичности;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСвойстваПланировщика()
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День")
		Или ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Неделя") Тогда
		
		ПланировщикКалендарьПрививок.ОтображатьТекущуюДату = Истина;
		ПланировщикКалендарьПрививок.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		ПланировщикКалендарьПрививок.КратностьПериодическогоВарианта = 24;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовки = Истина;
		
		ПланировщикКалендарьПрививок.ОтступСНачалаПереносаШкалыВремени = 9;
		ПланировщикКалендарьПрививок.ОтступСКонцаПереносаШкалыВремени = 5;
		
		Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День") Тогда
			ПланировщикКалендарьПрививок.ФорматПеренесенныхЗаголовковШкалыВремени = "ДЛФ=DD";
		Иначе
			ПланировщикКалендарьПрививок.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d'";
		КонецЕсли;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		
		ПланировщикКалендарьПрививок.ОтображатьТекущуюДату = Истина;
		ПланировщикКалендарьПрививок.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ПланировщикКалендарьПрививок.КратностьПериодическогоВарианта = 7;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		ПланировщикКалендарьПрививок.ОтступСНачалаПереносаШкалыВремени = 0;
		ПланировщикКалендарьПрививок.ОтступСКонцаПереносаШкалыВремени = 0;
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Год") Тогда
		
		ПланировщикКалендарьПрививок.ОтображатьТекущуюДату = Ложь;
		ПланировщикКалендарьПрививок.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		ПланировщикКалендарьПрививок.КратностьПериодическогоВарианта = 3;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		ПланировщикКалендарьПрививок.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		ПланировщикКалендарьПрививок.ОтступСНачалаПереносаШкалыВремени = 0;
		ПланировщикКалендарьПрививок.ОтступСКонцаПереносаШкалыВремени = 0;
		
		ПланировщикКалендарьПрививок.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ММММ yyyy'";
		
	КонецЕсли;
	
	ПланировщикКалендарьПрививок.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИнтервалФона()
	
	ПланировщикКалендарьПрививок.ИнтервалыФона.Очистить();
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		ИнтервалФона = ПланировщикКалендарьПрививок.ИнтервалыФона.Добавить(
			НачалоМесяца(ДатаНастройкиПериодичностиОтображения), 
			КонецМесяца(ДатаНастройкиПериодичностиОтображения));
	Иначе
		ИнтервалФона = ПланировщикКалендарьПрививок.ИнтервалыФона.Добавить(
			ДатаНачалаПериодичности, 
			ДатаОкончанияПериодичности);		
	КонецЕсли;		
	
	ИнтервалФона.Цвет = WebЦвета.ГолубойСКраснымОттенком;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШкалуВремени()
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День")
		Или ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Неделя") Тогда
		
		Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День") Тогда
			ПланировщикКалендарьПрививок.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Иначе
			ПланировщикКалендарьПрививок.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		КонецЕсли;
		
		ШкалаВремениЧас = ПланировщикКалендарьПрививок.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		
		ПланировщикКалендарьПрививок.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = ПланировщикКалендарьПрививок.ШкалаВремени.Элементы[0];
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d.MM'";
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Год") Тогда
		
		ПланировщикКалендарьПрививок.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = ПланировщикКалендарьПрививок.ШкалаВремени.Элементы[0];
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ММММ yyyy'";
		ШкалаВремени.ФорматДня = ФорматДняШкалыВремени.ДеньМесяца;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеТекущейПериодичности()
	
	Если ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.День") Тогда
		
		ПредставлениеТекущейПериодичности = Формат(ДатаНастройкиПериодичностиОтображения, "ДЛФ=DD");
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Неделя") Тогда
		
		ПредставлениеТекущейПериодичности = Формат(НачалоНедели(ДатаНастройкиПериодичностиОтображения), "ДЛФ=DD")
			+ " - " + Формат(КонецНедели(ДатаНастройкиПериодичностиОтображения), "ДЛФ=DD");
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Месяц") Тогда
		
		ПредставлениеТекущейПериодичности = Формат(ДатаНастройкиПериодичностиОтображения, "ДФ='ММММ yyyy'");
		
	ИначеЕсли ПериодичностьПланировщика = ПредопределенноеЗначение("Перечисление.ПериодыОтображенияКалендаря.Год") Тогда
		
		ПредставлениеТекущейПериодичности = Формат(ДатаНастройкиПериодичностиОтображения, "ДФ='yyyy'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОПрививках()
	
	ПланировщикКалендарьПрививок.Элементы.Очистить();
	
	ДанныеОПрививках = РаботаСПрививкамиПовтИсп.ПолучитьДанныеОПрививках(ДатаНачалаПериодичности, ДатаОкончанияПериодичности);
	
	Пока ДанныеОПрививках.Следующий() Цикл
		
		Элемент = ПланировщикКалендарьПрививок.Элементы.Добавить(НачалоДня(ДанныеОПрививках.ДатаВакцинации), КонецДня(ДанныеОПрививках.ДатаВакцинации));
		
		ТекстДляКалендаря = НСтр("ru = '%3 - %2, %1'");
		ТекстДляКалендаря = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстДляКалендаря,
			ДанныеОПрививках.РебенокПредставление,
			ДанныеОПрививках.ИнфекцияПредставление,
			ДанныеОПрививках.ВакцинаПредставление);
		
		Элемент.Текст = ТекстДляКалендаря;
		
		СтруктураРегистра = ОбщегоНазначенияСервер.СтруктураРегистраСведений("ПрививкиВОчереди");
		ЗаполнитьЗначенияСвойств(СтруктураРегистра, ДанныеОПрививках);
		
		Элемент.Значение = СтруктураРегистра;
		
		Если ДанныеОПрививках.ЕстьЗаписьКВрачу Тогда
			Элемент.Начало = ДанныеОПрививках.ВремяЗаписи;
			Элемент.Конец = ДанныеОПрививках.ВремяЗаписи + 60 * 60;
			Элемент.ЦветФона = WebЦвета.ЗеленоЖелтый;
		КонецЕсли;

	КонецЦикла;
	
	ДанныеОПрививках.Сбросить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистраПрививкиВОчереди(СтруктураДанных)
	
	Возврат ОбщегоНазначенияСервер.ПолучитьКлючЗаписиРегистраСведений("ПрививкиВОчереди", СтруктураДанных);

КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЗаписьРегистраПрививкиВОчереди(КлючЗаписи)

	МенеджерЗаписи = РегистрыСведений.ПрививкиВОчереди.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСуществующейЗаписиРегистраПрививкиВОчереди(Элемент)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		
		СтруктураДанных = Элемент.ВыделенныеЭлементы[0].Значение;
		КлючЗаписи = ПолучитьКлючЗаписиРегистраПрививкиВОчереди(СтруктураДанных);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
		ОткрытьФорму("РегистрСведений.ПрививкиВОчереди.Форма.ФормаЗаписи", ПараметрыФормы, Элемент);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти